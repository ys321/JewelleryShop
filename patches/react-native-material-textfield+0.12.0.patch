diff --git a/node_modules/react-native-material-textfield/src/components/affix/index.js b/node_modules/react-native-material-textfield/src/components/affix/index.js
index d6c9d64..b34f1c5 100644
--- a/node_modules/react-native-material-textfield/src/components/affix/index.js
+++ b/node_modules/react-native-material-textfield/src/components/affix/index.js
@@ -1,6 +1,6 @@
 import PropTypes from 'prop-types';
 import React, { PureComponent } from 'react';
-import { Animated } from 'react-native';
+import { Animated, Text } from 'react-native';
 
 import styles from './styles';
 
@@ -24,7 +24,7 @@ export default class Affix extends PureComponent {
     baseColor: PropTypes.string.isRequired,
     animationDuration: PropTypes.number.isRequired,
 
-    style: Animated.Text.propTypes.style,
+    style: Text.propTypes.style,
 
     children: PropTypes.oneOfType([
       PropTypes.arrayOf(PropTypes.node),
@@ -38,7 +38,7 @@ export default class Affix extends PureComponent {
     let { active, focused } = this.props;
 
     this.state = {
-      opacity: new Animated.Value((active || focused)? 1 : 0),
+      opacity: new Animated.Value((active || focused) ? 1 : 0),
     };
   }
 
@@ -49,7 +49,7 @@ export default class Affix extends PureComponent {
     if ((focused ^ props.focused) || (active ^ props.active)) {
       Animated
         .timing(opacity, {
-          toValue: (props.active || props.focused)? 1 : 0,
+          toValue: (props.active || props.focused) ? 1 : 0,
           duration: animationDuration,
         })
         .start();
diff --git a/node_modules/react-native-material-textfield/src/components/field/index.js b/node_modules/react-native-material-textfield/src/components/field/index.js
index 52c1868..0d0baec 100644
--- a/node_modules/react-native-material-textfield/src/components/field/index.js
+++ b/node_modules/react-native-material-textfield/src/components/field/index.js
@@ -157,7 +157,7 @@ export default class TextField extends PureComponent {
       let toValue = this.focusState(props.error, state.focused);
 
       Animated
-        .timing(focus, { toValue, duration })
+        .timing(focus, { toValue, duration, useNativeDriver: false })
         .start(this.onFocusAnimationEnd);
     }
   }
@@ -167,7 +167,7 @@ export default class TextField extends PureComponent {
   }
 
   focusState(error, focused) {
-    return error? -1 : (focused? 1 : 0);
+    return error ? -1 : (focused ? 1 : 0);
   }
 
   focus() {
@@ -193,8 +193,8 @@ export default class TextField extends PureComponent {
     let { text, receivedFocus } = this.state;
     let { value, defaultValue } = this.props;
 
-    return (receivedFocus || null != value || null == defaultValue)?
-      text:
+    return (receivedFocus || null != value || null == defaultValue) ?
+      text :
       defaultValue;
   }
 
@@ -362,27 +362,27 @@ export default class TextField extends PureComponent {
 
     let defaultVisible = !(receivedFocus || null != value || null == defaultValue);
 
-    value = defaultVisible?
-      defaultValue:
+    value = defaultVisible ?
+      defaultValue :
       text;
 
     let active = !!(value || props.placeholder);
     let count = value.length;
     let restricted = limit < count;
 
-    let textAlign = I18nManager.isRTL?
-      'right':
+    let textAlign = I18nManager.isRTL ?
+      'right' :
       'left';
 
-    let borderBottomColor = restricted?
-      errorColor:
+    let borderBottomColor = restricted ?
+      errorColor :
       focus.interpolate({
         inputRange: [-1, 0, 1],
         outputRange: [errorColor, baseColor, tintColor],
       });
 
-    let borderBottomWidth = restricted?
-      activeLineWidth:
+    let borderBottomWidth = restricted ?
+      activeLineWidth :
       focus.interpolate({
         inputRange: [-1, 0, 1],
         outputRange: [activeLineWidth, lineWidth, activeLineWidth],
@@ -392,12 +392,12 @@ export default class TextField extends PureComponent {
       paddingTop: labelHeight,
       paddingBottom: inputContainerPadding,
 
-      ...(disabled?
-        { overflow: 'hidden' }:
+      ...(disabled ?
+        { overflow: 'hidden' } :
         { borderBottomColor, borderBottomWidth }),
 
-      ...(props.multiline?
-        { height: 'web' === Platform.OS ? 'auto' : labelHeight + inputContainerPadding + height }:
+      ...(props.multiline ?
+        { height: 'web' === Platform.OS ? 'auto' : labelHeight + inputContainerPadding + height } :
         { height: labelHeight + inputContainerPadding + fontSize * 1.5 }),
     };
 
@@ -405,11 +405,11 @@ export default class TextField extends PureComponent {
       fontSize,
       textAlign,
 
-      color: (disabled || defaultVisible)?
-        baseColor:
+      color: (disabled || defaultVisible) ?
+        baseColor :
         textColor,
 
-      ...(props.multiline?
+      ...(props.multiline ?
         {
           height: fontSize * 1.5 + height,
 
@@ -417,7 +417,7 @@ export default class TextField extends PureComponent {
             ios: { top: -1 },
             android: { textAlignVertical: 'top' },
           }),
-        }:
+        } :
         { height: fontSize * 1.5 }),
     };
 
@@ -429,10 +429,10 @@ export default class TextField extends PureComponent {
         outputRange: [1, 0, 0],
       }),
 
-      fontSize: title?
-        titleFontSize:
+      fontSize: title ?
+        titleFontSize :
         focus.interpolate({
-          inputRange:  [-1, 0, 1],
+          inputRange: [-1, 0, 1],
           outputRange: [titleFontSize, 0, 0],
         }),
     };
@@ -450,10 +450,10 @@ export default class TextField extends PureComponent {
 
     let helperContainerStyle = {
       flexDirection: 'row',
-      height: (title || limit)?
-        titleFontSize * 2:
+      height: (title || limit) ?
+        titleFontSize * 2 :
         focus.interpolate({
-          inputRange:  [-1, 0, 1],
+          inputRange: [-1, 0, 1],
           outputRange: [titleFontSize * 2, 8, 8],
         }),
     };
@@ -462,8 +462,8 @@ export default class TextField extends PureComponent {
       style: containerStyle,
       onStartShouldSetResponder: () => true,
       onResponderRelease: this.onPress,
-      pointerEvents: !disabled && editable?
-        'auto':
+      pointerEvents: !disabled && editable ?
+        'auto' :
         'none',
     };
 
diff --git a/node_modules/react-native-material-textfield/src/components/helper/index.js b/node_modules/react-native-material-textfield/src/components/helper/index.js
index 60184ea..84e6e3a 100644
--- a/node_modules/react-native-material-textfield/src/components/helper/index.js
+++ b/node_modules/react-native-material-textfield/src/components/helper/index.js
@@ -1,6 +1,6 @@
 import PropTypes from 'prop-types';
 import React, { PureComponent } from 'react';
-import { View, Animated } from 'react-native';
+import { View, Animated, Text } from 'react-native';
 
 import styles from './styles';
 
@@ -10,7 +10,7 @@ export default class Helper extends PureComponent {
   };
 
   static propTypes = {
-    style: Animated.Text.propTypes.style,
+    style: Text.propTypes.style,
     children: PropTypes.oneOfType([
       PropTypes.arrayOf(PropTypes.node),
       PropTypes.node,
diff --git a/node_modules/react-native-material-textfield/src/components/label/index.js b/node_modules/react-native-material-textfield/src/components/label/index.js
index ac3ed53..b2004a8 100644
--- a/node_modules/react-native-material-textfield/src/components/label/index.js
+++ b/node_modules/react-native-material-textfield/src/components/label/index.js
@@ -1,6 +1,6 @@
 import PropTypes from 'prop-types';
 import React, { PureComponent } from 'react';
-import { Animated } from 'react-native';
+import { Animated, Text } from 'react-native';
 
 export default class Label extends PureComponent {
   static defaultProps = {
@@ -29,7 +29,7 @@ export default class Label extends PureComponent {
 
     animationDuration: PropTypes.number.isRequired,
 
-    style: Animated.Text.propTypes.style,
+    style: Text.propTypes.style,
 
     children: PropTypes.oneOfType([
       PropTypes.arrayOf(PropTypes.node),
@@ -54,7 +54,7 @@ export default class Label extends PureComponent {
       let toValue = this.inputState(props);
 
       Animated
-        .timing(input, { toValue, duration })
+        .timing(input, { toValue, duration, useNativeDriver: false })
         .start();
     }
 
@@ -62,17 +62,17 @@ export default class Label extends PureComponent {
       let toValue = this.focusState(props);
 
       Animated
-        .timing(focus, { toValue, duration })
+        .timing(focus, { toValue, duration, useNativeDriver: false })
         .start();
     }
   }
 
   inputState({ focused, active } = this.props) {
-    return active || focused? 1 : 0;
+    return active || focused ? 1 : 0;
   }
 
   focusState({ focused, errored } = this.props) {
-    return errored? -1 : (focused? 1 : 0);
+    return errored ? -1 : (focused ? 1 : 0);
   }
 
   render() {
@@ -95,8 +95,8 @@ export default class Label extends PureComponent {
       ...props
     } = this.props;
 
-    let color = restricted?
-      errorColor:
+    let color = restricted ?
+      errorColor :
       focus.interpolate({
         inputRange: [-1, 0, 1],
         outputRange: [errorColor, baseColor, tintColor],
