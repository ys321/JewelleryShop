{"version":3,"sources":["MMKV.ts"],"names":["onValueChangedListeners","Map","MMKV","constructor","configuration","id","nativeInstance","functionCache","has","set","get","getFunctionFromCache","functionName","onValuesChanged","keys","length","key","listener","value","func","getBoolean","getString","getNumber","contains","delete","getAllKeys","clearAll","recrypt","toString","join","toJSON","addOnValueChangedListener","onValueChanged","push","remove","index","indexOf","splice"],"mappings":"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","sourcesContent":["import { createMMKV } from './createMMKV';\nimport { createMockMMKV } from './createMMKV.mock';\nimport { isJest } from './PlatformChecker';\n\ninterface Listener {\n  remove: () => void;\n}\n\n/**\n * Used for configuration of a single MMKV instance.\n */\nexport interface MMKVConfiguration {\n  /**\n   * The MMKV instance's ID. If you want to use multiple instances, make sure to use different IDs!\n   *\n   * @example\n   * ```ts\n   * const userStorage = new MMKV({ id: `user-${userId}-storage` })\n   * const globalStorage = new MMKV({ id: 'global-app-storage' })\n   * ```\n   *\n   * @default 'mmkv.default'\n   */\n  id: string;\n  /**\n   * The MMKV instance's root path. By default, MMKV stores file inside `$(Documents)/mmkv/`. You can customize MMKV's root directory on MMKV initialization:\n   *\n   * @example\n   * ```ts\n   * const temporaryStorage = new MMKV({ path: '/tmp/' })\n   * ```\n   */\n  path?: string;\n  /**\n   * The MMKV instance's encryption/decryption key. By default, MMKV stores all key-values in plain text on file, relying on iOS's sandbox to make sure the file is encrypted. Should you worry about information leaking, you can choose to encrypt MMKV.\n   *\n   * Encryption keys can have a maximum length of 16 bytes.\n   *\n   * @example\n   * ```ts\n   * const secureStorage = new MMKV({ encryptionKey: 'my-encryption-key!' })\n   * ```\n   */\n  encryptionKey?: string;\n}\n\n/**\n * Represents a single MMKV instance.\n */\ninterface MMKVInterface {\n  /**\n   * Set a value for the given `key`.\n   */\n  set: (key: string, value: boolean | string | number) => void;\n  /**\n   * Get the boolean value for the given `key`, or `undefined` if it does not exist.\n   *\n   * @default undefined\n   */\n  getBoolean: (key: string) => boolean | undefined;\n  /**\n   * Get the string value for the given `key`, or `undefined` if it does not exist.\n   *\n   * @default undefined\n   */\n  getString: (key: string) => string | undefined;\n  /**\n   * Get the number value for the given `key`, or `undefined` if it does not exist.\n   *\n   * @default undefined\n   */\n  getNumber: (key: string) => number | undefined;\n  /**\n   * Checks whether the given `key` is being stored in this MMKV instance.\n   */\n  contains: (key: string) => boolean;\n  /**\n   * Delete the given `key`.\n   */\n  delete: (key: string) => void;\n  /**\n   * Get all keys.\n   *\n   * @default []\n   */\n  getAllKeys: () => string[];\n  /**\n   * Delete all keys.\n   */\n  clearAll: () => void;\n  /**\n   * Sets (or updates) the encryption-key to encrypt all data in this MMKV instance with.\n   *\n   * To remove encryption, pass `undefined` as a key.\n   *\n   * Encryption keys can have a maximum length of 16 bytes.\n   */\n  recrypt: (key: string | undefined) => void;\n  /**\n   * Adds a value changed listener. The Listener will be called whenever any value\n   * in this storage instance changes (set or delete).\n   *\n   * To unsubscribe from value changes, call `remove()` on the Listener.\n   */\n  addOnValueChangedListener: (\n    onValueChanged: (key: string) => void\n  ) => Listener;\n}\n\nexport type NativeMMKV = Pick<\n  MMKVInterface,\n  | 'clearAll'\n  | 'contains'\n  | 'delete'\n  | 'getAllKeys'\n  | 'getBoolean'\n  | 'getNumber'\n  | 'getString'\n  | 'set'\n  | 'recrypt'\n>;\n\nconst onValueChangedListeners = new Map<string, ((key: string) => void)[]>();\n\n/**\n * A single MMKV instance.\n */\nexport class MMKV implements MMKVInterface {\n  private nativeInstance: NativeMMKV;\n  private functionCache: Partial<NativeMMKV>;\n  private id: string;\n\n  /**\n   * Creates a new MMKV instance with the given Configuration.\n   * If no custom `id` is supplied, `'mmkv.default'` will be used.\n   */\n  constructor(configuration: MMKVConfiguration = { id: 'mmkv.default' }) {\n    this.id = configuration.id;\n    this.nativeInstance = isJest()\n      ? createMockMMKV()\n      : createMMKV(configuration);\n    this.functionCache = {};\n  }\n\n  private get onValueChangedListeners() {\n    if (!onValueChangedListeners.has(this.id)) {\n      onValueChangedListeners.set(this.id, []);\n    }\n    return onValueChangedListeners.get(this.id)!;\n  }\n\n  private getFunctionFromCache<T extends keyof NativeMMKV>(\n    functionName: T\n  ): NativeMMKV[T] {\n    if (this.functionCache[functionName] == null) {\n      this.functionCache[functionName] = this.nativeInstance[functionName];\n    }\n    return this.functionCache[functionName] as NativeMMKV[T];\n  }\n\n  private onValuesChanged(keys: string[]) {\n    if (this.onValueChangedListeners.length === 0) return;\n\n    for (const key of keys) {\n      for (const listener of this.onValueChangedListeners) {\n        listener(key);\n      }\n    }\n  }\n\n  set(key: string, value: boolean | string | number): void {\n    const func = this.getFunctionFromCache('set');\n    func(key, value);\n\n    this.onValuesChanged([key]);\n  }\n  getBoolean(key: string): boolean | undefined {\n    const func = this.getFunctionFromCache('getBoolean');\n    return func(key);\n  }\n  getString(key: string): string | undefined {\n    const func = this.getFunctionFromCache('getString');\n    return func(key);\n  }\n  getNumber(key: string): number | undefined {\n    const func = this.getFunctionFromCache('getNumber');\n    return func(key);\n  }\n  contains(key: string): boolean {\n    const func = this.getFunctionFromCache('contains');\n    return func(key);\n  }\n  delete(key: string): void {\n    const func = this.getFunctionFromCache('delete');\n    func(key);\n\n    this.onValuesChanged([key]);\n  }\n  getAllKeys(): string[] {\n    const func = this.getFunctionFromCache('getAllKeys');\n    return func();\n  }\n  clearAll(): void {\n    const keys = this.getAllKeys();\n\n    const func = this.getFunctionFromCache('clearAll');\n    func();\n\n    this.onValuesChanged(keys);\n  }\n  recrypt(key: string | undefined): void {\n    const func = this.getFunctionFromCache('recrypt');\n    return func(key);\n  }\n\n  toString(): string {\n    return `MMKV (${this.id}): [${this.getAllKeys().join(', ')}]`;\n  }\n  toJSON(): object {\n    return {\n      [this.id]: this.getAllKeys(),\n    };\n  }\n\n  addOnValueChangedListener(onValueChanged: (key: string) => void): Listener {\n    this.onValueChangedListeners.push(onValueChanged);\n\n    return {\n      remove: () => {\n        const index = this.onValueChangedListeners.indexOf(onValueChanged);\n        if (index !== -1) {\n          this.onValueChangedListeners.splice(index, 1);\n        }\n      },\n    };\n  }\n}\n"]}